generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppConfiguration {
  id                                     String   @id @default(cuid())
  updatedAt                              DateTime @updatedAt
  name                                   String
  url                                    String
  authRequireEmailVerification           Boolean  @default(false)
  authRequireOrganization                Boolean  @default(true)
  authRequireName                        Boolean  @default(true)
  authRecaptchaSiteKey                   String?
  analyticsEnabled                       Boolean  @default(true)
  analyticsSimpleAnalytics               Boolean  @default(false)
  analyticsPlausibleAnalytics            Boolean  @default(false)
  analyticsGoogleAnalyticsTrackingId     String?
  subscriptionRequired                   Boolean  @default(true)
  subscriptionAllowSubscribeBeforeSignUp Boolean  @default(true)
  subscriptionAllowSignUpBeforeSubscribe Boolean  @default(true)
  cookiesEnabled                         Boolean  @default(false)
  brandingFavicon                        String?
  brandingIcon                           String?
  brandingIconDarkMode                   String?
  brandingLogo                           String?
  brandingLogoDarkMode                   String?
  metricsEnabled                         Boolean  @default(false)
  metricsIgnoreUrls                      String?
  metricsLogToConsole                    Boolean  @default(false)
  metricsSaveToDatabase                  Boolean  @default(false)
  theme                                  String?
  bodyScripts                            String?
  headScripts                            String?
}

model AppCookie {
  id          String  @id @default(cuid())
  category    Int
  name        String
  description String
  enabled     Boolean @default(true)
  expiry      String?
  domain      String?
  type        String?
  href        String?
}

model User {
  id                         String                   @id @default(cuid())
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  email                      String                   @unique
  passwordHash               String
  firstName                  String
  lastName                   String
  avatar                     String?
  phone                      String?
  defaultTenantId            String?
  verifyToken                String?
  active                     Boolean                  @default(false)
  githubId                   String?                  @unique
  googleId                   String?                  @unique
  locale                     String?
  admin                      AdminUser?
  analyticsUniqueSessions    AnalyticsUniqueVisitor[]
  createdApiKeys             ApiKey[]
  blogArticles               BlogPost[]
  credits                    Credit[]
  readEmails                 EmailRead[]
  createdEntityViews         EntityView[]             @relation("createdByUser")
  entityViews                EntityView[]
  events                     Event[]
  feedback                   Feedback[]
  formulaLogs                FormulaLog[]
  createdGroups              Group[]
  groups                     GroupUser[]
  knowledgeBaseArticles      KnowledgeBaseArticle[]
  createdLinkedAccounts      LinkedAccount[]
  logs                       Log[]
  metricLogs                 MetricLog[]
  onboardingSessions         OnboardingSession[]
  portals                    Portal[]
  promptFlowExecutions       PromptFlowExecution[]
  createdRows                Row[]
  createdRowComments         RowComment[]
  createdRowCommentReactions RowCommentReaction[]
  rowPermissions             RowPermission[]
  assignedTasks              RowTask[]                @relation("assignedToUser")
  completedTasks             RowTask[]                @relation("completedByUser")
  createdRowTasks            RowTask[]                @relation("createdByUser")
  tags                       TagUser[]
  tenantIpAddresses          TenantIpAddress[]
  createdTenantRelationships TenantRelationship[]
  tenants                    TenantUser[]
  invitation                 TenantUserInvitation?    @relation("createdUser")
  sentInvitations            TenantUserInvitation[]   @relation("fromUser")
  roles                      UserRole[]
  workflowsCreated           Workflow[]               @relation("createdByUser")
  workflowCredentialsCreated WorkflowCredential[]
  workflowsExecuted          WorkflowExecution[]      @relation("executedByUser")
  workflowVariablesCreated   WorkflowVariable[]
}

model AdminUser {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tenant {
  id                        String                     @id @default(cuid())
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  slug                      String                     @unique
  name                      String
  icon                      String?
  subscriptionId            String?
  active                    Boolean                    @default(false)
  deactivatedReason         String?
  apiKeys                   ApiKey[]
  apiKeyLogs                ApiKeyLog[]
  blogCategories            BlogCategory[]
  blogPosts                 BlogPost[]
  blogTags                  BlogTag[]
  campaigns                 Campaign[]
  credits                   Credit[]
  emailSenders              EmailSender[]
  entityGroupConfigurations EntityGroupConfiguration[]
  entityTemplates           EntityTemplate[]
  entityViews               EntityView[]
  events                    Event[]
  feedback                  Feedback[]
  formulaLogs               FormulaLog[]
  groups                    Group[]
  asClientLinkedAccounts    LinkedAccount[]            @relation("clientTenant")
  createdLinkedAccounts     LinkedAccount[]            @relation("createdByTenant")
  asProviderLinkedAccounts  LinkedAccount[]            @relation("providerTenant")
  logs                      Log[]
  metricLogs                MetricLog[]
  onboardingSessions        OnboardingSession[]
  outboundEmails            OutboundEmail[]
  portals                   Portal[]
  portalsUsers              PortalUser[]
  promptFlowExecutions      PromptFlowExecution[]
  entityProperties          Property[]
  fromRegistration          Registration?
  rows                      Row[]
  rowPermissions            RowPermission[]
  tags                      TagTenant[]
  inboundAddresses          TenantInboundAddress[]
  ipAddresses               TenantIpAddress[]
  fromTenants               TenantRelationship[]       @relation("fromTenant")
  toTenants                 TenantRelationship[]       @relation("toTenant")
  tenantSettingsRow         TenantSettingsRow?
  subscription              TenantSubscription?
  users                     TenantUser[]
  invitations               TenantUserInvitation[]
  userRoles                 UserRole[]
  widgets                   Widget[]
  workflows                 Workflow[]
  workflowCredentials       WorkflowCredential[]
  workflowExecutions        WorkflowExecution[]
  workflowVariables         WorkflowVariable[]
  chatbots                  Chatbot[]
  types                     TenantType[]               @relation("TenantToTenantType")

  @@index([slug])
  @@map("Tenant")
}

model Registration {
  id                          String   @id @default(cuid())
  createdAt                   DateTime @default(now())
  email                       String   @unique
  firstName                   String
  lastName                    String
  token                       String   @unique
  company                     String?
  selectedSubscriptionPriceId String?
  createdTenantId             String?  @unique
  ipAddress                   String?
  slug                        String?
  createdTenant               Tenant?  @relation(fields: [createdTenantId], references: [id], onDelete: Cascade)
}

model Blacklist {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  type             String
  value            String
  active           Boolean  @default(true)
  registerAttempts Int      @default(0)
}

model TenantSubscription {
  tenantId         String                      @unique
  stripeCustomerId String?
  id               String                      @id @default(cuid())
  tenant           Tenant                      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  products         TenantSubscriptionProduct[]
}

model TenantSubscriptionProduct {
  id                    String                           @id @default(cuid())
  createdAt             DateTime                         @default(now())
  tenantSubscriptionId  String
  subscriptionProductId String
  cancelledAt           DateTime?
  endsAt                DateTime?
  stripeSubscriptionId  String?
  quantity              Int?
  fromCheckoutSessionId String?
  currentPeriodEnd      DateTime?
  currentPeriodStart    DateTime?
  subscriptionProduct   SubscriptionProduct              @relation(fields: [subscriptionProductId], references: [id])
  tenantSubscription    TenantSubscription               @relation(fields: [tenantSubscriptionId], references: [id], onDelete: Cascade)
  prices                TenantSubscriptionProductPrice[]
}

model TenantSubscriptionProductPrice {
  id                            String                          @id @default(cuid())
  tenantSubscriptionProductId   String
  subscriptionPriceId           String?
  subscriptionUsageBasedPriceId String?
  subscriptionPrice             SubscriptionPrice?              @relation(fields: [subscriptionPriceId], references: [id])
  subscriptionUsageBasedPrice   SubscriptionUsageBasedPrice?    @relation(fields: [subscriptionUsageBasedPriceId], references: [id])
  tenantSubscriptionProduct     TenantSubscriptionProduct       @relation(fields: [tenantSubscriptionProductId], references: [id], onDelete: Cascade)
  usageRecords                  TenantSubscriptionUsageRecord[]
}

model TenantSubscriptionUsageRecord {
  id                               String                         @id @default(cuid())
  tenantSubscriptionProductPriceId String
  timestamp                        Int
  quantity                         Int
  stripeSubscriptionItemId         String?
  tenantSubscriptionProductPrice   TenantSubscriptionProductPrice @relation(fields: [tenantSubscriptionProductPriceId], references: [id], onDelete: Cascade)
}

model CheckoutSessionStatus {
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  id              String   @unique
  pending         Boolean  @default(true)
  email           String
  fromUrl         String
  fromUserId      String?
  fromTenantId    String?
  createdUserId   String?
  createdTenantId String?
}

model TenantUser {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  tenantId  String
  userId    String
  type      Int
  joined    Int
  status    Int
  tenant    Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles     TenantUserRole[]
}

model Role {
  id               String           @id @default(cuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  name             String           @unique
  description      String
  type             String
  assignToNewUsers Boolean
  isDefault        Boolean
  order            Int
  permissions      RolePermission[]
  rowPermissions   RowPermission[]
  users            UserRole[]
}

model Permission {
  id                        String                   @id @default(cuid())
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  name                      String                   @unique
  description               String
  type                      String
  isDefault                 Boolean
  order                     Int
  entityId                  String?
  entity                    Entity?                  @relation(fields: [entityId], references: [id], onDelete: Cascade)
  inRoles                   RolePermission[]
  inTenantTypeRelationships TenantTypeRelationship[] @relation("PermissionToTenantTypeRelationship")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model UserRole {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  roleId    String
  tenantId  String?
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  tenant    Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  createdByUserId String
  tenantId        String?
  name            String
  description     String
  color           Int
  createdByUser   User            @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  tenant          Tenant?         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users           GroupUser[]
  rowPermissions  RowPermission[]

  @@index([createdByUserId], map: "group_createdByUserId")
}

model GroupUser {
  id      String @id @default(cuid())
  groupId String
  userId  String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TenantUserRole {
  id           String     @id @default(cuid())
  tenantUserId String
  order        Int
  name         String
  tenantUser   TenantUser @relation(fields: [tenantUserId], references: [id], onDelete: Cascade)
}

model TenantUserInvitation {
  id            String  @id @default(cuid())
  tenantId      String
  email         String
  firstName     String
  lastName      String
  type          Int
  pending       Boolean
  createdUserId String? @unique
  fromUserId    String?
  user          User?   @relation("createdUser", fields: [createdUserId], references: [id])
  fromUser      User?   @relation("fromUser", fields: [fromUserId], references: [id])
  tenant        Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model LinkedAccount {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  createdByUserId   String
  createdByTenantId String
  providerTenantId  String
  clientTenantId    String
  status            Int
  clientTenant      Tenant   @relation("clientTenant", fields: [clientTenantId], references: [id], onDelete: Cascade)
  createdByTenant   Tenant   @relation("createdByTenant", fields: [createdByTenantId], references: [id], onDelete: Cascade)
  createdByUser     User     @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  providerTenant    Tenant   @relation("providerTenant", fields: [providerTenantId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now())
  createdByUserId   String
  tenantId          String
  key               String            @default(uuid())
  alias             String
  expires           DateTime?
  active            Boolean
  createdByUser     User              @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  tenant            Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  entities          ApiKeyEntity[]
  apiKeyLogs        ApiKeyLog[]
  logs              Log[]
  createdRows       Row[]
  tenantIpAddresses TenantIpAddress[]

  @@unique([tenantId, alias])
  @@unique([tenantId, key])
  @@index([key])
}

model ApiKeyEntity {
  id       String  @id @default(cuid())
  apiKeyId String
  entityId String
  create   Boolean
  read     Boolean
  update   Boolean
  delete   Boolean
  apiKey   ApiKey  @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  entity   Entity  @relation(fields: [entityId], references: [id], onDelete: Cascade)
}

model Log {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  tenantId    String?
  userId      String?
  apiKeyId    String?
  rowId       String?
  url         String
  action      String
  details     String?
  commentId   String?
  webhookLogs EntityWebhookLog[]
  apiKey      ApiKey?            @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  comment     RowComment?        @relation(fields: [commentId], references: [id])
  row         Row?               @relation(fields: [rowId], references: [id])
  tenant      Tenant?            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKeyLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  apiKeyId  String?
  ip        String
  endpoint  String
  method    String
  params    String
  status    Int?
  error     String?
  duration  Int?
  tenantId  String?
  type      String?
  apiKey    ApiKey?  @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  tenant    Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId], map: "api_key_log_tenant")
  @@index([tenantId, createdAt], map: "api_key_log_tenant_created_at")
  @@index([tenantId, type], map: "api_key_log_tenant_type")
}

model SubscriptionProduct {
  id                       String                        @id @default(cuid())
  stripeId                 String
  order                    Int
  title                    String
  active                   Boolean
  model                    Int
  public                   Boolean
  description              String?
  badge                    String?
  groupDescription         String?
  groupTitle               String?
  billingAddressCollection String                        @default("auto")
  canBuyAgain              Boolean                       @default(false)
  hasQuantity              Boolean                       @default(false)
  features                 SubscriptionFeature[]
  prices                   SubscriptionPrice[]
  usageBasedPrices         SubscriptionUsageBasedPrice[]
  tenantProducts           TenantSubscriptionProduct[]
  assignsTenantTypes       TenantType[]                  @relation("SubscriptionProductToTenantType")
}

model SubscriptionPrice {
  id                    String                           @id @default(cuid())
  subscriptionProductId String
  stripeId              String
  type                  Int
  billingPeriod         Int
  price                 Decimal
  currency              String
  trialDays             Int
  active                Boolean
  subscriptionProduct   SubscriptionProduct              @relation(fields: [subscriptionProductId], references: [id], onDelete: Cascade)
  tenantProductPrices   TenantSubscriptionProductPrice[]
}

model SubscriptionUsageBasedPrice {
  id                    String                           @id @default(cuid())
  subscriptionProductId String
  stripeId              String
  billingPeriod         Int
  currency              String
  unit                  String
  unitTitle             String
  unitTitlePlural       String
  usageType             String
  aggregateUsage        String
  tiersMode             String
  billingScheme         String
  subscriptionProduct   SubscriptionProduct              @relation(fields: [subscriptionProductId], references: [id], onDelete: Cascade)
  tiers                 SubscriptionUsageBasedTier[]
  tenantProductPrices   TenantSubscriptionProductPrice[]
}

model SubscriptionUsageBasedTier {
  id                            String                      @id @default(cuid())
  subscriptionUsageBasedPriceId String
  from                          Int
  to                            Int?
  perUnitPrice                  Decimal?
  flatFeePrice                  Decimal?
  subscriptionUsageBasedPrice   SubscriptionUsageBasedPrice @relation(fields: [subscriptionUsageBasedPriceId], references: [id], onDelete: Cascade)
}

model SubscriptionFeature {
  id                    String              @id @default(cuid())
  subscriptionProductId String
  order                 Int
  title                 String
  name                  String
  type                  Int
  value                 Int
  href                  String?
  badge                 String?
  accumulate            Boolean             @default(false)
  subscriptionProduct   SubscriptionProduct @relation(fields: [subscriptionProductId], references: [id], onDelete: Cascade)
}

model BlogCategory {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  name      String
  color     Int
  tenantId  String?
  tenant    Tenant?    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  posts     BlogPost[]

  @@unique([tenantId, name])
}

model BlogTag {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  name      String        @unique
  color     Int
  tenantId  String?
  posts     BlogPostTag[]
  tenant    Tenant?       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model BlogPostTag {
  id     String   @id @default(cuid())
  postId String
  tagId  String
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  slug        String
  title       String
  description String
  date        DateTime
  image       String
  content     String
  readingTime String
  published   Boolean
  authorId    String?
  categoryId  String?
  contentType String        @default("markdown")
  tenantId    String?
  updatedAt   DateTime?     @updatedAt
  author      User?         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    BlogCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tenant      Tenant?       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tags        BlogPostTag[]

  @@unique([tenantId, slug])
}

model Module {
  id          String   @id @default(cuid())
  type        String   @default("app")
  order       Int
  name        String   @unique
  title       String
  description String
  icon        String
  entities    Entity[]
}

model Entity {
  id                  String                       @id @default(cuid())
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  name                String                       @unique
  slug                String                       @unique
  order               Int
  prefix              String                       @unique
  title               String
  titlePlural         String
  isAutogenerated     Boolean
  hasApi              Boolean
  icon                String
  active              Boolean
  hasTags             Boolean                      @default(true)
  hasComments         Boolean                      @default(true)
  hasTasks            Boolean                      @default(true)
  defaultVisibility   String                       @default("private")
  moduleId            String?
  showInSidebar       Boolean                      @default(true)
  type                String                       @default("app")
  onCreated           String?                      @default("redirectToOverview")
  promptFlowGroupId   String?
  onEdit              String?                      @default("editRoute")
  hasActivity         Boolean                      @default(true)
  hasBulkDelete       Boolean                      @default(false)
  hasViews            Boolean                      @default(true)
  apiKeys             ApiKeyEntity[]
  module              Module?                      @relation(fields: [moduleId], references: [id])
  groups              EntityGroupEntity[]
  parentEntities      EntityRelationship[]         @relation("childEntities")
  childEntities       EntityRelationship[]         @relation("parentEntities")
  tags                EntityTag[]
  templates           EntityTemplate[]
  permissions         EntityTenantUserPermission[]
  views               EntityView[]
  webhooks            EntityWebhook[]
  createdPermissions  Permission[]
  promptFlows         PromptFlow[]
  promptFlowGroup     PromptFlowGroupEntity[]
  inPromptFlowOutputs PromptFlowOutput[]
  properties          Property[]
  rows                Row[]
  inTenantTypes       TenantTypeEntity[]

  @@index([name], map: "entity_name")
  @@index([slug], map: "entity_slug")
}

model Property {
  id                   String                    @id @default(cuid())
  entityId             String
  order                Int
  name                 String
  title                String
  type                 Int
  isDefault            Boolean                   @default(false)
  isRequired           Boolean                   @default(false)
  isHidden             Boolean                   @default(false)
  isDisplay            Boolean                   @default(false)
  isUnique             Boolean                   @default(false)
  showInCreate         Boolean                   @default(true)
  isReadOnly           Boolean                   @default(false)
  subtype              String?
  formulaId            String?
  tenantId             String?
  canUpdate            Boolean                   @default(true)
  inViewGroupBy        EntityView[]
  inViewProperties     EntityViewProperty[]
  inPromptFlowMappings PromptFlowOutputMapping[]
  entity               Entity                    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  formula              Formula?                  @relation(fields: [formulaId], references: [id], onDelete: Cascade)
  tenant               Tenant?                   @relation(fields: [tenantId], references: [id])
  attributes           PropertyAttribute[]
  options              PropertyOption[]
  values               RowValue[]

  @@unique([entityId, name, tenantId])
  @@unique([entityId, title, tenantId])
  @@index([entityId], map: "entity_property")
  @@index([entityId, name], map: "entity_property_name")
}

model EntityView {
  id                    String               @id @default(cuid())
  entityId              String
  layout                String               @default("table")
  order                 Int
  name                  String
  title                 String
  pageSize              Int
  isDefault             Boolean
  groupByPropertyId     String?
  tenantId              String?
  userId                String?
  createdAt             DateTime             @default(now())
  createdByUserId       String?
  updatedAt             DateTime             @updatedAt
  gridColumns           Int?                 @default(5)
  gridColumns2xl        Int?                 @default(6)
  gridColumnsLg         Int?                 @default(4)
  gridColumnsMd         Int?                 @default(3)
  gridColumnsSm         Int?                 @default(2)
  gridColumnsXl         Int?                 @default(5)
  gridGap               String?              @default("sm")
  isSystem              Boolean              @default(false)
  inGroups              EntityGroupEntity[]
  inChildRelationships  EntityRelationship[] @relation("childEntityView")
  inParentRelationships EntityRelationship[] @relation("parentEntityView")
  createdByUser         User?                @relation("createdByUser", fields: [createdByUserId], references: [id])
  entity                Entity               @relation(fields: [entityId], references: [id], onDelete: Cascade)
  groupByProperty       Property?            @relation(fields: [groupByPropertyId], references: [id], onDelete: Cascade)
  tenant                Tenant?              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                  User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  filters               EntityViewFilter[]
  properties            EntityViewProperty[]
  sort                  EntityViewSort[]

  @@index([entityId], map: "entity_view")
  @@index([entityId, name], map: "entity_view_name")
}

model EntityViewProperty {
  id           String     @id @default(cuid())
  entityViewId String
  propertyId   String?
  order        Int
  name         String?
  entityView   EntityView @relation(fields: [entityViewId], references: [id], onDelete: Cascade)
  property     Property?  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([entityViewId], map: "entity_view_property")
  @@index([entityViewId, name], map: "entity_view_property_name")
}

model EntityViewFilter {
  id           String     @id @default(cuid())
  entityViewId String
  name         String
  condition    String
  value        String
  match        String     @default("and")
  entityView   EntityView @relation(fields: [entityViewId], references: [id], onDelete: Cascade)

  @@index([entityViewId], map: "entity_view_filter")
  @@index([entityViewId, name], map: "entity_view_filter_name")
}

model EntityViewSort {
  id           String     @id @default(cuid())
  entityViewId String
  name         String
  asc          Boolean
  order        Int
  entityView   EntityView @relation(fields: [entityViewId], references: [id], onDelete: Cascade)

  @@index([entityViewId], map: "entity_view_sort")
  @@index([entityViewId, name], map: "entity_view_sort_name")
}

model PropertyAttribute {
  id         String   @id @default(cuid())
  propertyId String
  name       String
  value      String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, name])
  @@index([propertyId], map: "property_attribute")
  @@index([propertyId, name], map: "property_attribute_name")
}

model PropertyOption {
  id         String   @id @default(cuid())
  propertyId String
  order      Int
  value      String
  name       String?
  color      Int      @default(0)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId], map: "property_option")
  @@index([propertyId, name], map: "property_option_name")
}

model EntityTag {
  id        String   @id @default(cuid())
  entityId  String
  value     String
  color     Int
  createdAt DateTime @default(now())
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  rowTags   RowTag[]

  @@index([entityId], map: "entity_tag")
  @@index([entityId, value], map: "entity_tag_value")
}

model EntityTenantUserPermission {
  id       String @id @default(cuid())
  entityId String
  level    Int
  entity   Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
}

model EntityWebhook {
  id       String             @id @default(cuid())
  entityId String
  action   String
  method   String
  endpoint String
  entity   Entity             @relation(fields: [entityId], references: [id], onDelete: Cascade)
  logs     EntityWebhookLog[]
}

model EntityWebhookLog {
  id        String        @id @default(cuid())
  webhookId String
  logId     String
  status    Int
  error     String?
  log       Log           @relation(fields: [logId], references: [id], onDelete: Cascade)
  webhook   EntityWebhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)
}

model EntityRelationship {
  id                 String            @id @default(cuid())
  parentId           String
  childId            String
  required           Boolean           @default(false)
  cascade            Boolean           @default(false)
  order              Int?
  title              String?
  type               String            @default("one-to-many")
  readOnly           Boolean           @default(false)
  childEntityViewId  String?
  parentEntityViewId String?
  hiddenIfEmpty      Boolean           @default(false)
  childEntityView    EntityView?       @relation("childEntityView", fields: [childEntityViewId], references: [id], onDelete: Cascade)
  child              Entity            @relation("childEntities", fields: [childId], references: [id], onDelete: Cascade)
  parentEntityView   EntityView?       @relation("parentEntityView", fields: [parentEntityViewId], references: [id], onDelete: Cascade)
  parent             Entity            @relation("parentEntities", fields: [parentId], references: [id], onDelete: Cascade)
  rows               RowRelationship[]

  @@unique([parentId, childId, title])
  @@index([parentId], map: "parent_entity_relationship")
  @@index([childId], map: "child_entity_relationship")
  @@index([parentId, childId], map: "parent_child_entity_relationship")
  @@index([parentId, childId, order], map: "parent_child_entity_relationship_order")
}

model SampleCustomEntity {
  rowId         String   @unique
  customText    String
  customNumber  Decimal
  customDate    DateTime
  customBoolean Boolean
  customSelect  String
  row           Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)
}

model RowRelationship {
  id             String             @id @default(cuid())
  relationshipId String
  parentId       String
  childId        String
  createdAt      DateTime           @default(now())
  metadata       String?
  child          Row                @relation("childRow", fields: [childId], references: [id], onDelete: Cascade)
  parent         Row                @relation("parentRow", fields: [parentId], references: [id], onDelete: Cascade)
  relationship   EntityRelationship @relation(fields: [relationshipId], references: [id], onDelete: Cascade)

  @@unique([parentId, childId])
  @@index([parentId], map: "parent_row_relationship")
  @@index([childId], map: "child_row_relationship")
  @@index([parentId, childId], map: "parent_child_row_relationship")
}

model Row {
  id                             String                        @id @default(cuid())
  createdAt                      DateTime                      @default(now())
  updatedAt                      DateTime                      @updatedAt
  entityId                       String
  tenantId                       String?
  folio                          Int
  createdByUserId                String?
  createdByApiKeyId              String?
  order                          Int                           @default(0)
  deletedAt                      DateTime?
  inEntityGroupConfigurationRows EntityGroupConfigurationRow[]
  formulaCalculationLogs         FormulaComponentLog[]
  logs                           Log[]
  outboundEmails                 OutboundEmail[]
  createdByApiKey                ApiKey?                       @relation(fields: [createdByApiKeyId], references: [id])
  createdByUser                  User?                         @relation(fields: [createdByUserId], references: [id])
  entity                         Entity                        @relation(fields: [entityId], references: [id])
  tenant                         Tenant?                       @relation(fields: [tenantId], references: [id])
  comments                       RowComment[]
  permissions                    RowPermission[]
  parentRows                     RowRelationship[]             @relation("childRow")
  childRows                      RowRelationship[]             @relation("parentRow")
  tags                           RowTag[]
  tasks                          RowTask[]
  values                         RowValue[]
  sampleCustomEntity             SampleCustomEntity?
  tenantSettingsRow              TenantSettingsRow[]

  @@index([deletedAt], map: "row_deletedAt")
  @@index([entityId], map: "row_entity")
  @@index([entityId, tenantId], map: "row_entity_tenant")
  @@index([entityId, tenantId, createdAt], map: "row_entity_tenant_created_at")
  @@index([tenantId], map: "row_tenant")
  @@index([createdByUserId], map: "row_createdByUserId")
}

model RowValue {
  id           String             @id @default(cuid())
  rowId        String
  propertyId   String
  textValue    String?
  numberValue  Decimal?
  dateValue    DateTime?
  booleanValue Boolean?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime?          @updatedAt
  media        RowMedia[]
  property     Property           @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  row          Row                @relation(fields: [rowId], references: [id], onDelete: Cascade)
  multiple     RowValueMultiple[]
  range        RowValueRange?

  @@index([rowId], map: "row_value_row")
  @@index([rowId, propertyId], map: "row_value_row_property")
}

model RowValueMultiple {
  id         String   @id @default(cuid())
  rowValueId String
  order      Int
  value      String
  rowValue   RowValue @relation(fields: [rowValueId], references: [id], onDelete: Cascade)

  @@index([rowValueId], map: "row_value_multiple_row_value")
}

model RowValueRange {
  rowValueId String    @unique
  numberMin  Decimal?
  numberMax  Decimal?
  dateMin    DateTime?
  dateMax    DateTime?
  rowValue   RowValue  @relation(fields: [rowValueId], references: [id], onDelete: Cascade)

  @@index([rowValueId], map: "row_value_range_row_value")
}

model RowPermission {
  id       String   @id @default(cuid())
  rowId    String
  tenantId String?
  roleId   String?
  groupId  String?
  userId   String?
  access   String   @default("view")
  public   Boolean?
  group    Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role     Role?    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  row      Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)
  tenant   Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([rowId], map: "row_permission_row")
  @@index([rowId, tenantId], map: "row_permission_row_tenant")
  @@index([rowId, roleId], map: "row_permission_row_role")
  @@index([rowId, groupId], map: "row_permission_row_group")
  @@index([rowId, userId], map: "row_permission_row_user")
  @@index([public], map: "row_permission_public")
}

model RowMedia {
  id              String   @id @default(cuid())
  rowValueId      String
  title           String
  name            String
  file            String
  type            String
  publicUrl       String?
  storageBucket   String?
  storageProvider String?
  rowValue        RowValue @relation(fields: [rowValueId], references: [id], onDelete: Cascade)

  @@index([rowValueId], map: "row_media_row_value")
  @@index([rowValueId, name], map: "row_media_row_value_name")
}

model RowTag {
  id        String    @id @default(cuid())
  rowId     String
  tagId     String
  createdAt DateTime  @default(now())
  row       Row       @relation(fields: [rowId], references: [id], onDelete: Cascade)
  tag       EntityTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@index([rowId], map: "row_tag_row")
  @@index([rowId, tagId], map: "row_tag_row_tag")
}

model RowComment {
  id              String               @id @default(cuid())
  createdAt       DateTime             @default(now())
  createdByUserId String
  rowId           String
  value           String
  isDeleted       Boolean?
  logs            Log[]
  createdByUser   User                 @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  row             Row                  @relation(fields: [rowId], references: [id], onDelete: Cascade)
  reactions       RowCommentReaction[]

  @@index([rowId], map: "row_comment_row")
}

model RowCommentReaction {
  id              String     @id @default(cuid())
  createdAt       DateTime   @default(now())
  createdByUserId String
  rowCommentId    String
  reaction        String
  createdByUser   User       @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  rowComment      RowComment @relation(fields: [rowCommentId], references: [id], onDelete: Cascade)
}

model RowTask {
  id                String    @id @default(cuid())
  createdAt         DateTime  @default(now())
  createdByUserId   String
  rowId             String
  title             String
  description       String
  completed         Boolean
  completedAt       DateTime?
  completedByUserId String?
  assignedToUserId  String?
  deadline          DateTime?
  assignedToUser    User?     @relation("assignedToUser", fields: [assignedToUserId], references: [id], onDelete: Cascade)
  completedByUser   User?     @relation("completedByUser", fields: [completedByUserId], references: [id], onDelete: Cascade)
  createdByUser     User      @relation("createdByUser", fields: [createdByUserId], references: [id], onDelete: Cascade)
  row               Row       @relation(fields: [rowId], references: [id], onDelete: Cascade)
}

model EntityTemplate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  tenantId  String?
  entityId  String
  title     String
  config    String
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  tenant    Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, entityId, title])
}

model TenantInboundAddress {
  id       String  @id @default(cuid())
  tenantId String
  address  String  @unique
  email    Email[]
  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Email {
  id                     String                @id @default(cuid())
  tenantInboundAddressId String?
  messageId              String                @unique
  type                   String
  date                   DateTime
  subject                String
  fromEmail              String
  fromName               String?
  toEmail                String
  toName                 String?
  textBody               String
  htmlBody               String
  tenantInboundAddress   TenantInboundAddress? @relation(fields: [tenantInboundAddressId], references: [id], onDelete: Cascade)
  attachments            EmailAttachment[]
  cc                     EmailCc[]
  reads                  EmailRead[]
}

model EmailRead {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  emailId   String
  userId    String
  email     Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailCc {
  id      String  @id @default(cuid())
  emailId String
  toEmail String
  toName  String?
  email   Email   @relation(fields: [emailId], references: [id], onDelete: Cascade)
}

model EmailAttachment {
  id              String  @id @default(cuid())
  emailId         String
  name            String
  type            String
  length          Int
  content         String
  publicUrl       String?
  storageBucket   String?
  storageProvider String?
  email           Email   @relation(fields: [emailId], references: [id], onDelete: Cascade)
}

model Event {
  id          String                @id @default(cuid())
  createdAt   DateTime              @default(now())
  tenantId    String?
  name        String
  data        String
  resource    String?
  description String?
  userId      String?
  tenant      Tenant?               @relation(fields: [tenantId], references: [id])
  user        User?                 @relation(fields: [userId], references: [id])
  attempts    EventWebhookAttempt[]
}

model EventWebhookAttempt {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  startedAt  DateTime?
  finishedAt DateTime?
  eventId    String
  endpoint   String
  success    Boolean?
  status     Int?
  message    String?
  body       String?
  event      Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model AnalyticsSettings {
  id          String  @id @default(cuid())
  public      Boolean @default(false)
  ignorePages String
  onlyPages   String
}

model AnalyticsUniqueVisitor {
  id             String              @id @default(cuid())
  createdAt      DateTime            @default(now())
  cookie         String              @unique
  httpReferrer   String?
  browser        String?
  browserVersion String?
  os             String?
  osVersion      String?
  device         String?
  source         String?
  medium         String?
  campaign       String?
  content        String?
  term           String?
  country        String?
  city           String?
  fromUrl        String?
  fromRoute      String?
  via            String?
  userId         String?
  portalId       String?
  portalUserId   String?
  events         AnalyticsEvent[]
  pageViews      AnalyticsPageView[]
  portal         Portal?             @relation(fields: [portalId], references: [id], onDelete: Cascade)
  portalUser     PortalUser?         @relation(fields: [portalUserId], references: [id], onDelete: Cascade)
  user           User?               @relation(fields: [userId], references: [id])
}

model AnalyticsPageView {
  id              String                 @id @default(cuid())
  createdAt       DateTime               @default(now())
  uniqueVisitorId String
  url             String
  route           String?
  portalId        String?
  portalUserId    String?
  portal          Portal?                @relation(fields: [portalId], references: [id], onDelete: Cascade)
  portalUser      PortalUser?            @relation(fields: [portalUserId], references: [id], onDelete: Cascade)
  uniqueVisitor   AnalyticsUniqueVisitor @relation(fields: [uniqueVisitorId], references: [id], onDelete: Cascade)
}

model AnalyticsEvent {
  id              String                 @id @default(cuid())
  createdAt       DateTime               @default(now())
  uniqueVisitorId String
  action          String
  category        String?
  label           String?
  value           String?
  url             String?
  route           String?
  featureFlagId   String?
  portalId        String?
  portalUserId    String?
  featureFlag     FeatureFlag?           @relation(fields: [featureFlagId], references: [id])
  portal          Portal?                @relation(fields: [portalId], references: [id], onDelete: Cascade)
  portalUser      PortalUser?            @relation(fields: [portalUserId], references: [id], onDelete: Cascade)
  uniqueVisitor   AnalyticsUniqueVisitor @relation(fields: [uniqueVisitorId], references: [id], onDelete: Cascade)
}

model EmailSender {
  id             String          @id @default(cuid())
  tenantId       String?
  provider       String
  stream         String
  apiKey         String
  fromEmail      String
  fromName       String?
  replyToEmail   String?
  campaigns      Campaign[]
  tenant         Tenant?         @relation(fields: [tenantId], references: [id])
  outboundEmails OutboundEmail[]
}

model Campaign {
  id            String          @id @default(cuid())
  tenantId      String?
  emailSenderId String
  name          String
  subject       String
  htmlBody      String
  textBody      String?
  status        String          @default("draft")
  track         Boolean
  sentAt        DateTime?
  emailSender   EmailSender     @relation(fields: [emailSenderId], references: [id])
  tenant        Tenant?         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  recipients    OutboundEmail[]
}

model OutboundEmail {
  id               String               @id @default(cuid())
  createdAt        DateTime             @default(now())
  tenantId         String?
  campaignId       String?
  contactRowId     String?
  email            String
  fromSenderId     String
  isPreview        Boolean?
  error            String?
  sentAt           DateTime?
  deliveredAt      DateTime?
  bouncedAt        DateTime?
  spamComplainedAt DateTime?
  unsubscribedAt   DateTime?
  campaign         Campaign?            @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contactRow       Row?                 @relation(fields: [contactRowId], references: [id])
  fromSender       EmailSender          @relation(fields: [fromSenderId], references: [id])
  tenant           Tenant?              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  clicks           OutboundEmailClick[]
  opens            OutboundEmailOpen[]
}

model OutboundEmailOpen {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  firstOpen       Boolean
  outboundEmailId String
  outboundEmail   OutboundEmail @relation(fields: [outboundEmailId], references: [id], onDelete: Cascade)
}

model OutboundEmailClick {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  link            String
  outboundEmailId String
  outboundEmail   OutboundEmail @relation(fields: [outboundEmailId], references: [id], onDelete: Cascade)
}

model Page {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  slug        String        @unique
  isPublished Boolean       @default(false)
  isPublic    Boolean       @default(false)
  blocks      PageBlock[]
  metaTags    PageMetaTag[]
}

model PageMetaTag {
  id     String  @id @default(cuid())
  pageId String?
  order  Int?
  name   String
  value  String
  page   Page?   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, name, value])
}

model PageBlock {
  id     String @id @default(cuid())
  order  Int
  type   String
  value  String
  pageId String
  page   Page   @relation(fields: [pageId], references: [id])
}

model Tag {
  id      String      @id @default(cuid())
  name    String      @unique
  color   Int?
  tenants TagTenant[]
  users   TagUser[]
}

model TagUser {
  id     String @id @default(cuid())
  userId String
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model TagTenant {
  id       String @id @default(cuid())
  tenantId String
  tagId    String
  tag      Tag    @relation(fields: [tagId], references: [id])
  tenant   Tenant @relation(fields: [tenantId], references: [id])
}

model Onboarding {
  id             String              @id @default(cuid())
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  title          String
  type           String
  realtime       Boolean             @default(false)
  active         Boolean             @default(false)
  canBeDismissed Boolean             @default(true)
  height         String?
  filters        OnboardingFilter[]
  sessions       OnboardingSession[]
  steps          OnboardingStep[]
}

model OnboardingFilter {
  id           String                         @id @default(cuid())
  createdAt    DateTime                       @default(now())
  onboardingId String
  type         String
  value        String?
  onboarding   Onboarding                     @relation(fields: [onboardingId], references: [id], onDelete: Cascade)
  matches      OnboardingSessionFilterMatch[]
}

model OnboardingStep {
  id           String                  @id @default(cuid())
  onboardingId String
  order        Int
  block        String
  sessionSteps OnboardingSessionStep[]
  onboarding   Onboarding              @relation(fields: [onboardingId], references: [id], onDelete: Cascade)
}

model OnboardingSession {
  id              String                         @id @default(cuid())
  createdAt       DateTime                       @default(now())
  updatedAt       DateTime                       @updatedAt
  onboardingId    String
  userId          String
  tenantId        String?
  status          String
  startedAt       DateTime?
  completedAt     DateTime?
  dismissedAt     DateTime?
  createdRealtime Boolean                        @default(false)
  onboarding      Onboarding                     @relation(fields: [onboardingId], references: [id], onDelete: Cascade)
  tenant          Tenant?                        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User                           @relation(fields: [userId], references: [id], onDelete: Cascade)
  actions         OnboardingSessionAction[]
  matches         OnboardingSessionFilterMatch[]
  sessionSteps    OnboardingSessionStep[]

  @@unique([onboardingId, userId, tenantId])
}

model OnboardingSessionAction {
  id                  String            @id @default(cuid())
  createdAt           DateTime          @default(now())
  onboardingSessionId String
  type                String
  name                String
  value               String
  onboardingSession   OnboardingSession @relation(fields: [onboardingSessionId], references: [id], onDelete: Cascade)
}

model OnboardingSessionFilterMatch {
  id                  String            @id @default(cuid())
  onboardingFilterId  String
  onboardingSessionId String
  onboardingFilter    OnboardingFilter  @relation(fields: [onboardingFilterId], references: [id], onDelete: Cascade)
  onboardingSession   OnboardingSession @relation(fields: [onboardingSessionId], references: [id], onDelete: Cascade)
}

model OnboardingSessionStep {
  id                  String            @id @default(cuid())
  onboardingSessionId String
  stepId              String
  seenAt              DateTime?
  completedAt         DateTime?
  onboardingSession   OnboardingSession @relation(fields: [onboardingSessionId], references: [id], onDelete: Cascade)
  step                OnboardingStep    @relation(fields: [stepId], references: [id], onDelete: Cascade)
}

model TenantIpAddress {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String?
  apiKeyId  String?
  ip        String
  fromUrl   String
  createdAt DateTime @default(now())
  apiKey    ApiKey?  @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, ip, userId, apiKeyId])
}

model FeatureFlag {
  id          String              @id @default(cuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  name        String
  description String
  enabled     Boolean             @default(false)
  events      AnalyticsEvent[]
  filters     FeatureFlagFilter[]

  @@unique([name, description])
}

model FeatureFlagFilter {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  featureFlagId String
  type          String
  value         String?
  action        String?
  featureFlag   FeatureFlag @relation(fields: [featureFlagId], references: [id], onDelete: Cascade)
}

model TenantSettingsRow {
  tenantId String @unique
  rowId    String
  row      Row    @relation(fields: [rowId], references: [id], onDelete: Cascade)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model PromptFlowGroup {
  id          String                    @id @default(cuid())
  createdAt   DateTime                  @default(now())
  order       Int
  title       String
  description String
  promptFlows PromptFlow[]
  entities    PromptFlowGroupEntity[]
  templates   PromptFlowGroupTemplate[]
}

model PromptFlowGroupTemplate {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now())
  order             Int
  title             String
  promptFlowGroupId String
  promptFlowGroup   PromptFlowGroup @relation(fields: [promptFlowGroupId], references: [id], onDelete: Cascade)
}

model PromptFlowGroupEntity {
  entityId          String
  promptFlowGroupId String
  entity            Entity          @relation(fields: [entityId], references: [id], onDelete: Cascade)
  promptFlowGroup   PromptFlowGroup @relation(fields: [promptFlowGroupId], references: [id], onDelete: Cascade)

  @@id([entityId, promptFlowGroupId])
}

model PromptFlow {
  id                String                    @id @default(cuid())
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  model             String
  title             String
  description       String
  actionTitle       String?
  executionType     String                    @default("sequential")
  promptFlowGroupId String?
  stream            Boolean                   @default(false)
  inputEntityId     String?
  public            Boolean                   @default(true)
  inputEntity       Entity?                   @relation(fields: [inputEntityId], references: [id], onDelete: Cascade)
  promptFlowGroup   PromptFlowGroup?          @relation(fields: [promptFlowGroupId], references: [id], onDelete: Cascade)
  executions        PromptFlowExecution[]
  inputVariables    PromptFlowInputVariable[]
  outputs           PromptFlowOutput[]
  templates         PromptTemplate[]
}

model PromptFlowInputVariable {
  id           String     @id @default(cuid())
  promptFlowId String
  type         String
  name         String
  title        String
  isRequired   Boolean
  promptFlow   PromptFlow @relation(fields: [promptFlowId], references: [id], onDelete: Cascade)
}

model PromptTemplate {
  id                   String                    @id @default(cuid())
  flowId               String
  order                Int
  title                String
  template             String
  temperature          Decimal
  generations          Int?
  maxTokens            Int?
  inPromptFlowMappings PromptFlowOutputMapping[]
  flow                 PromptFlow                @relation(fields: [flowId], references: [id], onDelete: Cascade)
  results              PromptTemplateResult[]
}

model PromptFlowOutput {
  id           String                    @id @default(cuid())
  promptFlowId String
  type         String
  entityId     String
  entity       Entity                    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  promptFlow   PromptFlow                @relation(fields: [promptFlowId], references: [id], onDelete: Cascade)
  mappings     PromptFlowOutputMapping[]
}

model PromptFlowOutputMapping {
  id                 String           @id @default(cuid())
  promptFlowOutputId String
  promptTemplateId   String
  propertyId         String
  promptFlowOutput   PromptFlowOutput @relation(fields: [promptFlowOutputId], references: [id], onDelete: Cascade)
  promptTemplate     PromptTemplate   @relation(fields: [promptTemplateId], references: [id], onDelete: Cascade)
  property           Property         @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([promptFlowOutputId, promptTemplateId, propertyId])
}

model PromptFlowExecution {
  id          String                 @id @default(cuid())
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  flowId      String
  userId      String?
  tenantId    String?
  status      String
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int?
  model       String?
  flow        PromptFlow             @relation(fields: [flowId], references: [id], onDelete: Cascade)
  tenant      Tenant?                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  results     PromptTemplateResult[]
}

model PromptTemplateResult {
  id              String              @id @default(cuid())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  flowExecutionId String
  templateId      String?
  order           Int
  status          String
  prompt          String
  response        String?
  error           String?
  startedAt       DateTime?
  completedAt     DateTime?
  flowExecution   PromptFlowExecution @relation(fields: [flowExecutionId], references: [id])
  template        PromptTemplate?     @relation(fields: [templateId], references: [id])
}

model MetricLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  env       String
  type      String
  route     String
  url       String
  function  String
  duration  Int
  userId    String?
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Formula {
  id                 String             @id @default(cuid())
  createdAt          DateTime           @default(now())
  name               String
  description        String?
  resultAs           String
  calculationTrigger String
  withLogs           Boolean            @default(false)
  components         FormulaComponent[]
  logs               FormulaLog[]
  inProperties       Property[]
}

model FormulaComponent {
  id        String  @id @default(cuid())
  formulaId String
  order     Int
  value     String
  type      String
  formula   Formula @relation(fields: [formulaId], references: [id], onDelete: Cascade)
}

model FormulaLog {
  id              String                @id @default(cuid())
  createdAt       DateTime              @default(now())
  formulaId       String
  userId          String?
  tenantId        String?
  originalTrigger String?
  triggeredBy     String
  expression      String
  result          String
  duration        Int                   @default(0)
  error           String?
  rowValueId      String?
  components      FormulaComponentLog[]
  formula         Formula               @relation(fields: [formulaId], references: [id], onDelete: Cascade)
  tenant          Tenant?               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FormulaComponentLog {
  id           String     @id @default(cuid())
  order        Int
  value        String
  rowId        String?
  formulaLogId String
  type         String
  formulaLog   FormulaLog @relation(fields: [formulaLogId], references: [id], onDelete: Cascade)
  row          Row?       @relation(fields: [rowId], references: [id], onDelete: Cascade)
}

model EntityGroup {
  id                String                     @id @default(cuid())
  createdAt         DateTime                   @default(now())
  order             Int
  slug              String                     @unique
  title             String
  icon              String
  collapsible       Boolean
  section           String?
  configurationRows EntityGroupConfiguration[]
  entities          EntityGroupEntity[]
}

model EntityGroupEntity {
  id            String      @id @default(cuid())
  entityGroupId String
  entityId      String
  allViewId     String?
  selectMax     Int?
  selectMin     Int?
  allView       EntityView? @relation(fields: [allViewId], references: [id], onDelete: Cascade)
  entityGroup   EntityGroup @relation(fields: [entityGroupId], references: [id], onDelete: Cascade)
  entity        Entity      @relation(fields: [entityId], references: [id], onDelete: Cascade)
}

model TenantType {
  id                   String                   @id @default(cuid())
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  title                String                   @unique
  titlePlural          String
  description          String?
  isDefault            Boolean                  @default(false)
  entities             TenantTypeEntity[]
  fromTypes            TenantTypeRelationship[] @relation("fromType")
  toTypes              TenantTypeRelationship[] @relation("toType")
  subscriptionProducts SubscriptionProduct[]    @relation("SubscriptionProductToTenantType")
  tenants              Tenant[]                 @relation("TenantToTenantType")
}

model TenantTypeEntity {
  id           String      @id @default(cuid())
  tenantTypeId String?
  entityId     String
  enabled      Boolean
  entity       Entity      @relation(fields: [entityId], references: [id], onDelete: Cascade)
  tenantType   TenantType? @relation(fields: [tenantTypeId], references: [id], onDelete: Cascade)
}

model TenantTypeRelationship {
  id            String               @id @default(cuid())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  canCreate     Boolean              @default(false)
  fromTypeId    String?
  toTypeId      String?
  relationships TenantRelationship[]
  fromType      TenantType?          @relation("fromType", fields: [fromTypeId], references: [id], onDelete: Cascade)
  toType        TenantType?          @relation("toType", fields: [toTypeId], references: [id], onDelete: Cascade)
  permissions   Permission[]         @relation("PermissionToTenantTypeRelationship")

  @@unique([fromTypeId, toTypeId])
}

model TenantRelationship {
  id                       String                 @id @default(cuid())
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  tenantTypeRelationshipId String
  fromTenantId             String
  toTenantId               String
  createdByUserId          String?
  createdByUser            User?                  @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  fromTenant               Tenant                 @relation("fromTenant", fields: [fromTenantId], references: [id], onDelete: Cascade)
  tenantTypeRelationship   TenantTypeRelationship @relation(fields: [tenantTypeRelationshipId], references: [id], onDelete: Cascade)
  toTenant                 Tenant                 @relation("toTenant", fields: [toTenantId], references: [id], onDelete: Cascade)

  @@unique([fromTenantId, toTenantId])
}

model KnowledgeBase {
  id              String                  @id @default(cuid())
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  slug            String                  @unique
  title           String
  description     String
  defaultLanguage String
  layout          String
  color           Int
  enabled         Boolean
  languages       String
  links           String
  logo            String
  seoImage        String
  basePath        String
  articles        KnowledgeBaseArticle[]
  categories      KnowledgeBaseCategory[]
  views           KnowledgeBaseViews[]
}

model KnowledgeBaseCategory {
  id              String                         @id @default(cuid())
  knowledgeBaseId String
  slug            String
  order           Int
  title           String
  description     String
  icon            String
  language        String
  seoImage        String
  articles        KnowledgeBaseArticle[]
  knowledgeBase   KnowledgeBase                  @relation(fields: [knowledgeBaseId], references: [id])
  sections        KnowledgeBaseCategorySection[]

  @@unique([knowledgeBaseId, slug])
}

model KnowledgeBaseCategorySection {
  id          String                 @id @default(cuid())
  categoryId  String
  order       Int
  title       String
  description String
  articles    KnowledgeBaseArticle[]
  category    KnowledgeBaseCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model KnowledgeBaseArticle {
  id                     String                          @id @default(cuid())
  createdAt              DateTime                        @default(now())
  updatedAt              DateTime?                       @updatedAt
  knowledgeBaseId        String
  categoryId             String?
  sectionId              String?
  slug                   String
  title                  String
  description            String
  order                  Int
  contentDraft           String
  contentPublished       String                          @default("")
  contentType            String
  language               String
  featuredOrder          Int?
  seoImage               String
  publishedAt            DateTime?
  relatedInArticleId     String?
  createdByUserId        String?
  contentPublishedAsText String                          @default("")
  category               KnowledgeBaseCategory?          @relation(fields: [categoryId], references: [id])
  createdByUser          User?                           @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  knowledgeBase          KnowledgeBase                   @relation(fields: [knowledgeBaseId], references: [id])
  section                KnowledgeBaseCategorySection?   @relation(fields: [sectionId], references: [id])
  downvotes              KnowledgeBaseArticleDownvotes[]
  upvotes                KnowledgeBaseArticleUpvotes[]
  views                  KnowledgeBaseArticleViews[]
  relatedArticles        KnowledgeBaseRelatedArticle[]   @relation("relatedArticles")
  relatedInArticles      KnowledgeBaseRelatedArticle[]   @relation("relatedInArticles")

  @@unique([knowledgeBaseId, slug])
}

model KnowledgeBaseRelatedArticle {
  id               String               @id @default(cuid())
  articleId        String
  relatedArticleId String
  article          KnowledgeBaseArticle @relation("relatedArticles", fields: [articleId], references: [id], onDelete: Cascade)
  relatedArticle   KnowledgeBaseArticle @relation("relatedInArticles", fields: [relatedArticleId], references: [id], onDelete: Cascade)
}

model KnowledgeBaseViews {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  knowledgeBaseId String
  userAnalyticsId String
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)

  @@unique([knowledgeBaseId, userAnalyticsId])
}

model KnowledgeBaseArticleViews {
  knowledgeBaseArticleId String
  userAnalyticsId        String
  knowledgeBaseArticle   KnowledgeBaseArticle @relation(fields: [knowledgeBaseArticleId], references: [id], onDelete: Cascade)

  @@unique([knowledgeBaseArticleId, userAnalyticsId])
}

model KnowledgeBaseArticleUpvotes {
  createdAt              DateTime             @default(now())
  knowledgeBaseArticleId String
  userAnalyticsId        String
  knowledgeBaseArticle   KnowledgeBaseArticle @relation(fields: [knowledgeBaseArticleId], references: [id], onDelete: Cascade)

  @@unique([knowledgeBaseArticleId, userAnalyticsId])
}

model KnowledgeBaseArticleDownvotes {
  createdAt              DateTime             @default(now())
  knowledgeBaseArticleId String
  userAnalyticsId        String
  knowledgeBaseArticle   KnowledgeBaseArticle @relation(fields: [knowledgeBaseArticleId], references: [id], onDelete: Cascade)

  @@unique([knowledgeBaseArticleId, userAnalyticsId])
}

model EntityGroupConfiguration {
  id            String                        @id @default(cuid())
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt
  tenantId      String?
  entityGroupId String
  title         String
  entityGroup   EntityGroup                   @relation(fields: [entityGroupId], references: [id], onDelete: Cascade)
  tenant        Tenant?                       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  rows          EntityGroupConfigurationRow[]
}

model EntityGroupConfigurationRow {
  id                         String                   @id @default(cuid())
  entityGroupConfigurationId String
  rowId                      String
  entityGroupConfiguration   EntityGroupConfiguration @relation(fields: [entityGroupConfigurationId], references: [id], onDelete: Cascade)
  row                        Row                      @relation(fields: [rowId], references: [id], onDelete: Cascade)

  @@unique([entityGroupConfigurationId, rowId])
}

model FileUploadProgress {
  id              String      @id @default(cuid())
  fileName        String
  progressServer  Int
  progressStorage Int
  url             String?
  error           String?
  chunks          FileChunk[]
}

model FileChunk {
  id           Int                @id @default(autoincrement())
  fileUploadId String
  index        Int
  data         Bytes
  fileUpload   FileUploadProgress @relation(fields: [fileUploadId], references: [id], onDelete: Cascade)
}

model Workflow {
  id                  String                 @id @default(cuid())
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  name                String
  description         String
  status              String                 @default("draft")
  tenantId            String?
  createdByUserId     String?
  appliesToAllTenants Boolean                @default(false)
  createdByUser       User?                  @relation("createdByUser", fields: [createdByUserId], references: [id])
  tenant              Tenant?                @relation(fields: [tenantId], references: [id])
  blocks              WorkflowBlock[]
  executions          WorkflowExecution[]
  inputExamples       WorkflowInputExample[]
}

model WorkflowBlock {
  id                  String                        @id @default(cuid())
  workflowId          String
  createdAt           DateTime                      @default(now())
  updatedAt           DateTime                      @updatedAt
  type                String
  description         String
  isTrigger           Boolean                       @default(false)
  isBlock             Boolean                       @default(false)
  input               String
  workflow            Workflow                      @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  conditionsGroups    WorkflowBlockConditionGroup[]
  fromExecutions      WorkflowBlockExecution[]      @relation("fromExecutions")
  executions          WorkflowBlockExecution[]      @relation("executions")
  toBlocks            WorkflowBlockToBlock[]        @relation("fromBlock")
  fromBlocks          WorkflowBlockToBlock[]        @relation("toBlock")
  waitingInExecutions WorkflowExecution[]
}

model WorkflowBlockConditionGroup {
  id              String                   @id @default(cuid())
  workflowBlockId String
  index           Int
  type            String
  conditions      WorkflowBlockCondition[]
  workflowBlock   WorkflowBlock            @relation(fields: [workflowBlockId], references: [id], onDelete: Cascade)
}

model WorkflowBlockCondition {
  id                            String                      @id @default(cuid())
  workflowBlockConditionGroupId String
  index                         Int
  variable                      String
  operator                      String
  value                         String
  workflowBlockConditionGroup   WorkflowBlockConditionGroup @relation(fields: [workflowBlockConditionGroupId], references: [id], onDelete: Cascade)
}

model WorkflowBlockToBlock {
  id          String        @id @default(cuid())
  fromBlockId String
  toBlockId   String
  condition   String?
  fromBlock   WorkflowBlock @relation("fromBlock", fields: [fromBlockId], references: [id], onDelete: Cascade)
  toBlock     WorkflowBlock @relation("toBlock", fields: [toBlockId], references: [id], onDelete: Cascade)

  @@unique([fromBlockId, toBlockId])
}

model WorkflowExecution {
  id                  String                   @id @default(cuid())
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  workflowId          String
  tenantId            String?
  type                String
  status              String
  input               String
  output              String?
  duration            Int?
  endedAt             DateTime?
  error               String?
  waitingBlockId      String?
  appliesToAllTenants Boolean                  @default(false)
  createdByUserId     String?
  blockRuns           WorkflowBlockExecution[]
  createdByUser       User?                    @relation("executedByUser", fields: [createdByUserId], references: [id])
  tenant              Tenant?                  @relation(fields: [tenantId], references: [id])
  waitingBlock        WorkflowBlock?           @relation(fields: [waitingBlockId], references: [id])
  workflow            Workflow                 @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model WorkflowInputExample {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  workflowId String
  title      String
  input      String?
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, title])
}

model WorkflowBlockExecution {
  id                  String            @id @default(cuid())
  workflowExecutionId String
  workflowBlockId     String
  fromWorkflowBlockId String?
  status              String
  startedAt           DateTime
  input               String?
  output              String?
  duration            Int?
  endedAt             DateTime?
  error               String?
  fromWorkflowBlock   WorkflowBlock?    @relation("fromExecutions", fields: [fromWorkflowBlockId], references: [id])
  workflowBlock       WorkflowBlock     @relation("executions", fields: [workflowBlockId], references: [id], onDelete: Cascade)
  workflowExecution   WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
}

model WorkflowVariable {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tenantId        String?
  name            String
  value           String
  createdByUserId String?
  userId          String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdByUser   User?    @relation(fields: [userId], references: [id])

  @@unique([tenantId, name])
}

model WorkflowCredential {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tenantId        String?
  name            String
  value           String
  createdByUserId String?
  userId          String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdByUser   User?    @relation(fields: [userId], references: [id])

  @@unique([tenantId, name])
}

model IpAddress {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  ip          String         @unique
  provider    String
  type        String
  countryCode String
  countryName String
  regionCode  String
  regionName  String
  city        String
  zipCode     String
  latitude    Decimal?
  longitude   Decimal?
  metadata    String
  logs        IpAddressLog[]
}

model IpAddressLog {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  ip          String
  url         String
  action      String
  description String
  success     Boolean
  error       String?
  metadata    String?
  ipAddressId String?
  ipAddress   IpAddress? @relation(fields: [ipAddressId], references: [id])
}

model Credit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  tenantId  String
  userId    String?
  amount    Int
  type      String
  objectId  String?
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([tenantId, userId])
  @@index([tenantId, createdAt])
}

model Feedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  tenantId  String?
  userId    String?
  message   String
  fromUrl   String
  tenant    Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Portal {
  id                                 String                               @id @default(cuid())
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime                             @updatedAt
  tenantId                           String?
  createdByUserId                    String?
  subdomain                          String                               @unique
  domain                             String?                              @unique
  title                              String
  isPublished                        Boolean                              @default(false)
  stripeAccountId                    String?
  themeColor                         String?
  themeScheme                        String?
  seoTitle                           String?
  seoDescription                     String?
  seoImage                           String?
  seoThumbnail                       String?
  seoTwitterCreator                  String?
  seoTwitterSite                     String?
  seoKeywords                        String?
  authRequireEmailVerification       Boolean                              @default(false)
  authRequireOrganization            Boolean                              @default(true)
  authRequireName                    Boolean                              @default(true)
  analyticsSimpleAnalytics           Boolean                              @default(false)
  analyticsPlausibleAnalytics        Boolean                              @default(false)
  analyticsGoogleAnalyticsTrackingId String?
  brandingLogo                       String?
  brandingLogoDarkMode               String?
  brandingIcon                       String?
  brandingIconDarkMode               String?
  brandingFavicon                    String?
  affiliatesRewardfulApiKey          String?
  affiliatesRewardfulUrl             String?
  metadata                           Json?
  analyticsEvents                    AnalyticsEvent[]
  analyticsPageViews                 AnalyticsPageView[]
  analyticsUniqueVisitors            AnalyticsUniqueVisitor[]
  createdByUser                      User?                                @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  tenant                             Tenant?                              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  checkoutSessionStatus              PortalCheckoutSessionStatus[]
  pages                              PortalPage[]
  subscriptionFeatures               PortalSubscriptionFeature[]
  subscriptionPrices                 PortalSubscriptionPrice[]
  subscriptionProducts               PortalSubscriptionProduct[]
  users                              PortalUser[]
  registrations                      PortalUserRegistration[]
  userSubscriptions                  PortalUserSubscription[]
  userSubscriptionProducts           PortalUserSubscriptionProduct[]
  userSubscriptionProductPrices      PortalUserSubscriptionProductPrice[]
}

model PortalUser {
  id                      String                   @id @default(cuid())
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  tenantId                String?
  portalId                String
  email                   String
  passwordHash            String
  firstName               String
  lastName                String
  avatar                  String?
  phone                   String?
  verifyToken             String?
  githubId                String?
  googleId                String?
  locale                  String?
  analyticsEvents         AnalyticsEvent[]
  analyticsPageViews      AnalyticsPageView[]
  analyticsUniqueVisitors AnalyticsUniqueVisitor[]
  portal                  Portal                   @relation(fields: [portalId], references: [id], onDelete: Cascade)
  tenant                  Tenant?                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  fromRegistration        PortalUserRegistration?
  subscription            PortalUserSubscription?

  @@unique([portalId, email])
  @@unique([portalId, githubId])
  @@unique([portalId, googleId])
  @@index([portalId])
}

model PortalPage {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  portalId   String
  name       String
  attributes Json?
  portal     Portal   @relation(fields: [portalId], references: [id], onDelete: Cascade)

  @@unique([portalId, name])
}

model PortalUserRegistration {
  id                          String      @id @default(cuid())
  createdAt                   DateTime    @default(now())
  portalId                    String
  email                       String
  firstName                   String
  lastName                    String
  slug                        String?
  token                       String      @unique
  ipAddress                   String?
  company                     String?
  selectedSubscriptionPriceId String?
  createdPortalUserId         String?     @unique
  createdPortalUser           PortalUser? @relation(fields: [createdPortalUserId], references: [id], onDelete: Cascade)
  portal                      Portal      @relation(fields: [portalId], references: [id], onDelete: Cascade)

  @@unique([portalId, email])
}

model PortalSubscriptionProduct {
  id                       String                          @id @default(cuid())
  portalId                 String
  stripeId                 String
  order                    Int
  title                    String
  active                   Boolean
  model                    Int
  public                   Boolean
  groupTitle               String?
  groupDescription         String?
  description              String?
  badge                    String?
  billingAddressCollection String                          @default("auto")
  hasQuantity              Boolean                         @default(false)
  canBuyAgain              Boolean                         @default(false)
  features                 PortalSubscriptionFeature[]
  prices                   PortalSubscriptionPrice[]
  portal                   Portal                          @relation(fields: [portalId], references: [id], onDelete: Cascade)
  portalUserProducts       PortalUserSubscriptionProduct[]
}

model PortalSubscriptionPrice {
  id                      String                               @id @default(cuid())
  portalId                String
  subscriptionProductId   String
  stripeId                String
  type                    Int
  billingPeriod           Int
  price                   Decimal
  currency                String
  trialDays               Int
  active                  Boolean
  portal                  Portal                               @relation(fields: [portalId], references: [id], onDelete: Cascade)
  subscriptionProduct     PortalSubscriptionProduct            @relation(fields: [subscriptionProductId], references: [id], onDelete: Cascade)
  portalUserProductPrices PortalUserSubscriptionProductPrice[]
}

model PortalSubscriptionFeature {
  id                    String                    @id @default(cuid())
  portalId              String
  subscriptionProductId String
  order                 Int
  title                 String
  name                  String
  type                  Int
  value                 Int
  href                  String?
  badge                 String?
  accumulate            Boolean                   @default(false)
  portal                Portal                    @relation(fields: [portalId], references: [id], onDelete: Cascade)
  subscriptionProduct   PortalSubscriptionProduct @relation(fields: [subscriptionProductId], references: [id], onDelete: Cascade)
}

model PortalUserSubscription {
  id               String                          @id @default(cuid())
  portalId         String
  portalUserId     String                          @unique
  stripeCustomerId String?
  portal           Portal                          @relation(fields: [portalId], references: [id], onDelete: Cascade)
  portalUser       PortalUser                      @relation(fields: [portalUserId], references: [id], onDelete: Cascade)
  products         PortalUserSubscriptionProduct[]
}

model PortalUserSubscriptionProduct {
  id                       String                               @id @default(cuid())
  portalId                 String
  createdAt                DateTime                             @default(now())
  portalUserSubscriptionId String
  subscriptionProductId    String
  cancelledAt              DateTime?
  endsAt                   DateTime?
  stripeSubscriptionId     String?
  quantity                 Int?
  fromCheckoutSessionId    String?
  currentPeriodStart       DateTime?
  currentPeriodEnd         DateTime?
  portal                   Portal                               @relation(fields: [portalId], references: [id], onDelete: Cascade)
  portalUserSubscription   PortalUserSubscription               @relation(fields: [portalUserSubscriptionId], references: [id], onDelete: Cascade)
  subscriptionProduct      PortalSubscriptionProduct            @relation(fields: [subscriptionProductId], references: [id])
  prices                   PortalUserSubscriptionProductPrice[]
}

model PortalUserSubscriptionProductPrice {
  id                              String                        @id @default(cuid())
  portalId                        String
  portalUserSubscriptionProductId String
  subscriptionPriceId             String?
  portal                          Portal                        @relation(fields: [portalId], references: [id], onDelete: Cascade)
  portalUserSubscriptionProduct   PortalUserSubscriptionProduct @relation(fields: [portalUserSubscriptionProductId], references: [id], onDelete: Cascade)
  subscriptionPrice               PortalSubscriptionPrice?      @relation(fields: [subscriptionPriceId], references: [id])
}

model PortalCheckoutSessionStatus {
  id            String   @unique
  portalId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  pending       Boolean  @default(true)
  email         String
  fromUrl       String
  fromUserId    String?
  createdUserId String?
  portal        Portal   @relation(fields: [portalId], references: [id], onDelete: Cascade)
}

model Widget {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenantId   String?
  name       String
  appearance String
  metadata   String
  tenant     Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, name])
}

model DataSourceType {
  sourceTypeId Int           @id @default(autoincrement())
  sourceKey    String        @unique @db.VarChar(50)
  sourceName   String
  dataSources  DataSources[]

  @@map("DataSourceTypes")
}

model DataSources {
  sourceId         Int            @id @default(autoincrement())
  chatbotId        String         @db.Uuid
  sourceTypeId     Int
  tenantId         String
  sourceDetails    Json?
  uploadedFilePath String?
  createdAt        DateTime       @default(now())
  sourceType       DataSourceType @relation(fields: [sourceTypeId], references: [sourceTypeId])

  @@map("DataSources")
}

model Languages {
  languageId   Int    @id @default(autoincrement())
  languageKey  String @unique
  languageName String
}

model Chatbot {
  id              String              @id @default(cuid())
  name            String              @db.VarChar(100)
  uniqueUrl       String              @unique
  theme           Json?               @default("{\"fontSize\": null, \"fontFamily\": null, \"borderRadius\": null, \"primaryColor\": null, \"secondaryColor\": null, \"backgroundColor\": null}")
  languageId      Int?
  initialMessage  String?             @default("Hello! How can I assist you?")
  businessName    String?             @db.VarChar(100)
  llmModelId      Int?
  totalCharacters Int                 @default(1000000)
  status          ChatbotStatus       @default(ACTIVE)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  tenantId        String
  language        Language?           @relation(fields: [languageId], references: [id])
  llmModel        LlmModel?           @relation(fields: [llmModelId], references: [id])
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  instructions    InstructionMaster[]
  lastCompletedStep Int @default(1)

  @@index([tenantId])
  @@map("chatbots")
}

model LlmModel {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(100)
  type        LlmModelType
  apiKey      String?
  endpoint    String?
  maxTokens   Int          @default(4096)
  temperature Float        @default(0.7)
  isEnabled   Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  chatbots    Chatbot[]

  @@map("llm_models")
}

model Language {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  code      String    @unique @db.VarChar(10)
  isEnabled Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  chatbots  Chatbot[]

  @@map("languages")
}

model Industry {
  id           Int                    @id @default(autoincrement())
  name         String                 @unique @db.VarChar(100)
  icon         String?                @db.VarChar(50)
  description  String?
  isEnabled    Boolean                @default(true)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  chatbotTypes IndustryChatbotTypes[]
  instructions InstructionMaster[]
}

model ChatbotType {
  id           Int                    @id @default(autoincrement())
  name         String                 @unique @db.VarChar(100)
  icon         String?                @db.VarChar(50)
  description  String?
  isEnabled    Boolean                @default(true)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  skills       ChatbotTypeSkills[]
  industries   IndustryChatbotTypes[]
  instructions InstructionMaster[]
}

model Skill {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @db.VarChar(100)
  icon              String?             @db.VarChar(50)
  description       String?
  isEnabled         Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  chatbotTypes      ChatbotTypeSkills[]
  instructionSkills InstructionSkill[]
}

model InstructionMaster {
  id                Int                @id @default(autoincrement())
  chatbotId         String?
  industryId        Int?
  chatbotTypeId     Int?
  purpose           String?
  audience          String?
  tone              String?            @db.VarChar(50)
  objective         String?
  style             String?
  rules             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  chatbot           Chatbot?           @relation(fields: [chatbotId], references: [id])
  chatbotType       ChatbotType?       @relation(fields: [chatbotTypeId], references: [id])
  industry          Industry?          @relation(fields: [industryId], references: [id])
  instructionSkills InstructionSkill[]

  @@map("instruction_master")
}

model InstructionSkill {
  instructionId Int
  skillId       Int
  createdAt     DateTime          @default(now())
  instruction   InstructionMaster @relation(fields: [instructionId], references: [id], onDelete: Cascade)
  skill         Skill             @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([instructionId, skillId])
  @@map("instruction_skills")
}

model IndustryChatbotTypes {
  industryId    Int
  chatbotTypeId Int
  createdAt     DateTime    @default(now())
  chatbotType   ChatbotType @relation(fields: [chatbotTypeId], references: [id], onDelete: Cascade)
  industry      Industry    @relation(fields: [industryId], references: [id], onDelete: Cascade)

  @@id([industryId, chatbotTypeId])
  @@map("industry_chatbot_types")
}

model ChatbotTypeSkills {
  chatbotTypeId Int
  skillId       Int
  createdAt     DateTime    @default(now())
  chatbotType   ChatbotType @relation(fields: [chatbotTypeId], references: [id], onDelete: Cascade)
  skill         Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([chatbotTypeId, skillId])
  @@map("chatbot_type_skills")
}

enum ChatbotStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum LlmModelType {
  GPT_3_5
  GPT_4
  CLAUDE
  CUSTOM
}
